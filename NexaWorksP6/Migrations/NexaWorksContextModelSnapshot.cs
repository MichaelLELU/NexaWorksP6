// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NexaWorksP6.Data;

#nullable disable

namespace NexaWorksP6.Migrations
{
    [DbContext(typeof(NexaWorksContext))]
    partial class NexaWorksContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NexaWorksP6.Entities.OperatingSystemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperatingSystems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Windows"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Linux"
                        },
                        new
                        {
                            Id = 3,
                            Name = "MacOS"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Android"
                        },
                        new
                        {
                            Id = 5,
                            Name = "iOS"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Windows Mobile"
                        });
                });

            modelBuilder.Entity("NexaWorksP6.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Trader en Herbe"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Maître des Investissements"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Planificateur d’Entraînement"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Planificateur d’Anxiété Sociale"
                        });
                });

            modelBuilder.Entity("NexaWorksP6.Entities.ProductVersionOs", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("VersionId")
                        .HasColumnType("int");

                    b.Property<int>("OperatingSystemId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "VersionId", "OperatingSystemId");

                    b.HasIndex("OperatingSystemId");

                    b.HasIndex("VersionId");

                    b.ToTable("ProductVersionOs");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            VersionId = 1,
                            OperatingSystemId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            VersionId = 1,
                            OperatingSystemId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            VersionId = 1,
                            OperatingSystemId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            VersionId = 2,
                            OperatingSystemId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            VersionId = 2,
                            OperatingSystemId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            VersionId = 3,
                            OperatingSystemId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            VersionId = 3,
                            OperatingSystemId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            VersionId = 3,
                            OperatingSystemId = 4
                        },
                        new
                        {
                            ProductId = 1,
                            VersionId = 3,
                            OperatingSystemId = 5
                        },
                        new
                        {
                            ProductId = 1,
                            VersionId = 3,
                            OperatingSystemId = 6
                        },
                        new
                        {
                            ProductId = 1,
                            VersionId = 4,
                            OperatingSystemId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            VersionId = 4,
                            OperatingSystemId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            VersionId = 1,
                            OperatingSystemId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            VersionId = 5,
                            OperatingSystemId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            VersionId = 5,
                            OperatingSystemId = 4
                        },
                        new
                        {
                            ProductId = 2,
                            VersionId = 5,
                            OperatingSystemId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            VersionId = 6,
                            OperatingSystemId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            VersionId = 6,
                            OperatingSystemId = 4
                        },
                        new
                        {
                            ProductId = 2,
                            VersionId = 6,
                            OperatingSystemId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            VersionId = 1,
                            OperatingSystemId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            VersionId = 1,
                            OperatingSystemId = 3
                        },
                        new
                        {
                            ProductId = 3,
                            VersionId = 2,
                            OperatingSystemId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            VersionId = 2,
                            OperatingSystemId = 3
                        },
                        new
                        {
                            ProductId = 3,
                            VersionId = 2,
                            OperatingSystemId = 4
                        },
                        new
                        {
                            ProductId = 3,
                            VersionId = 2,
                            OperatingSystemId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            VersionId = 5,
                            OperatingSystemId = 3
                        },
                        new
                        {
                            ProductId = 3,
                            VersionId = 5,
                            OperatingSystemId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            VersionId = 1,
                            OperatingSystemId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            VersionId = 1,
                            OperatingSystemId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            VersionId = 1,
                            OperatingSystemId = 4
                        },
                        new
                        {
                            ProductId = 4,
                            VersionId = 1,
                            OperatingSystemId = 5
                        },
                        new
                        {
                            ProductId = 4,
                            VersionId = 6,
                            OperatingSystemId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            VersionId = 6,
                            OperatingSystemId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            VersionId = 6,
                            OperatingSystemId = 4
                        },
                        new
                        {
                            ProductId = 4,
                            VersionId = 6,
                            OperatingSystemId = 5
                        });
                });

            modelBuilder.Entity("NexaWorksP6.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "En cours"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Résolu"
                        });
                });

            modelBuilder.Entity("NexaWorksP6.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperatingSystemId")
                        .HasColumnType("int");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("VersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperatingSystemId");

                    b.HasIndex("StatusId");

                    b.HasIndex("VersionId");

                    b.HasIndex("ProductId", "VersionId", "OperatingSystemId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 2,
                            Problem = "Crash aléatoire à l’ouverture du module Portefeuille (Linux)",
                            ProductId = 1,
                            StatusId = 1,
                            VersionId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 1,
                            Problem = "Graphiques n’affichent pas les mèches en échelle logarithmique (Windows)",
                            ProductId = 1,
                            Resolution = "Correction du moteur graphique",
                            ResolvedAt = new DateTime(2023, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2,
                            VersionId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 3,
                            Problem = "Erreur de connexion API temps réel (MacOS)",
                            ProductId = 1,
                            StatusId = 1,
                            VersionId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 4,
                            Problem = "Affichage incorrect des cours sur mobile (Android)",
                            ProductId = 1,
                            Resolution = "Ajustement des layouts responsives",
                            ResolvedAt = new DateTime(2023, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2,
                            VersionId = 3
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 5,
                            Problem = "Synchronisation des alertes iOS non fiable",
                            ProductId = 1,
                            StatusId = 1,
                            VersionId = 3
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 2,
                            Problem = "Blocage sur import CSV (Linux)",
                            ProductId = 1,
                            Resolution = "Amélioration du parseur CSV",
                            ResolvedAt = new DateTime(2023, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2,
                            VersionId = 4
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 3,
                            Problem = "Crash à l’export PDF (MacOS)",
                            ProductId = 2,
                            StatusId = 1,
                            VersionId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 4,
                            Problem = "Notifications push répétées (Android)",
                            ProductId = 2,
                            Resolution = "Filtrage des doublons",
                            ResolvedAt = new DateTime(2023, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2,
                            VersionId = 5
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 5,
                            Problem = "Problème d’accès FaceID (iOS)",
                            ProductId = 2,
                            StatusId = 1,
                            VersionId = 5
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 3,
                            Problem = "Décalage fuseau horaire dans les rapports (MacOS)",
                            ProductId = 2,
                            Resolution = "Conversion timezone locale",
                            ResolvedAt = new DateTime(2023, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2,
                            VersionId = 6
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 4,
                            Problem = "Lenteur sur grands portefeuilles (Android)",
                            ProductId = 2,
                            StatusId = 1,
                            VersionId = 6
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 5,
                            Problem = "Crash lors du partage via AirDrop (iOS)",
                            ProductId = 2,
                            Resolution = "Mise à jour librairie iOS",
                            ResolvedAt = new DateTime(2023, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2,
                            VersionId = 6
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 2,
                            Problem = "Synchronisation CalDAV échoue (Linux)",
                            ProductId = 3,
                            StatusId = 1,
                            VersionId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 3,
                            Problem = "Erreur de rendu calendrier (MacOS)",
                            ProductId = 3,
                            Resolution = "Correctif CSS + mise à jour moteur UI",
                            ResolvedAt = new DateTime(2023, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2,
                            VersionId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 4,
                            Problem = "Widget Android ne se met pas à jour",
                            ProductId = 3,
                            StatusId = 1,
                            VersionId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 5,
                            Problem = "Rappel iOS non déclenché",
                            ProductId = 3,
                            Resolution = "Ajustement du système de notifications locales",
                            ResolvedAt = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2,
                            VersionId = 2
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 1,
                            Problem = "Erreur à l’export Excel (Windows)",
                            ProductId = 3,
                            StatusId = 1,
                            VersionId = 5
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 3,
                            Problem = "Graphique calories ne s’affiche pas (MacOS)",
                            ProductId = 3,
                            Resolution = "Correction binding données",
                            ResolvedAt = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2,
                            VersionId = 5
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 1,
                            Problem = "Impossible d’ajouter un nouvel événement (Windows)",
                            ProductId = 4,
                            StatusId = 1,
                            VersionId = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 3,
                            Problem = "Mauvais affichage calendrier (MacOS)",
                            ProductId = 4,
                            Resolution = "Adaptation layout responsive",
                            ResolvedAt = new DateTime(2024, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2,
                            VersionId = 1
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 4,
                            Problem = "Crash en ajoutant un rappel (Android)",
                            ProductId = 4,
                            StatusId = 1,
                            VersionId = 1
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 5,
                            Problem = "Notifications silencieuses sur iOS",
                            ProductId = 4,
                            Resolution = "Réglage des permissions push",
                            ResolvedAt = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2,
                            VersionId = 1
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 1,
                            Problem = "Erreur sauvegarde locale (Windows)",
                            ProductId = 4,
                            StatusId = 1,
                            VersionId = 6
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 3,
                            Problem = "Crash lors de l’export PDF (MacOS)",
                            ProductId = 4,
                            Resolution = "Mise à jour moteur PDF",
                            ResolvedAt = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2,
                            VersionId = 6
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperatingSystemId = 5,
                            Problem = "Synchronisation iCloud intermittente (iOS)",
                            ProductId = 4,
                            StatusId = 1,
                            VersionId = 6
                        });
                });

            modelBuilder.Entity("NexaWorksP6.Entities.VersionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Versions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "1.0"
                        },
                        new
                        {
                            Id = 2,
                            Name = "1.1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "1.2"
                        },
                        new
                        {
                            Id = 4,
                            Name = "1.3"
                        },
                        new
                        {
                            Id = 5,
                            Name = "2.0"
                        },
                        new
                        {
                            Id = 6,
                            Name = "2.1"
                        });
                });

            modelBuilder.Entity("NexaWorksP6.Entities.ProductVersionOs", b =>
                {
                    b.HasOne("NexaWorksP6.Entities.OperatingSystemEntity", "OperatingSystem")
                        .WithMany("Compatibilities")
                        .HasForeignKey("OperatingSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NexaWorksP6.Entities.Product", "Product")
                        .WithMany("Compatibilities")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NexaWorksP6.Entities.VersionEntity", "Version")
                        .WithMany("Compatibilities")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperatingSystem");

                    b.Navigation("Product");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("NexaWorksP6.Entities.Ticket", b =>
                {
                    b.HasOne("NexaWorksP6.Entities.OperatingSystemEntity", "OperatingSystem")
                        .WithMany("Tickets")
                        .HasForeignKey("OperatingSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NexaWorksP6.Entities.Product", "Product")
                        .WithMany("Tickets")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NexaWorksP6.Entities.Status", "Status")
                        .WithMany("Tickets")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NexaWorksP6.Entities.VersionEntity", "Version")
                        .WithMany("Tickets")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NexaWorksP6.Entities.ProductVersionOs", "Pvo")
                        .WithMany("Tickets")
                        .HasForeignKey("ProductId", "VersionId", "OperatingSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OperatingSystem");

                    b.Navigation("Product");

                    b.Navigation("Pvo");

                    b.Navigation("Status");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("NexaWorksP6.Entities.OperatingSystemEntity", b =>
                {
                    b.Navigation("Compatibilities");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("NexaWorksP6.Entities.Product", b =>
                {
                    b.Navigation("Compatibilities");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("NexaWorksP6.Entities.ProductVersionOs", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("NexaWorksP6.Entities.Status", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("NexaWorksP6.Entities.VersionEntity", b =>
                {
                    b.Navigation("Compatibilities");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
